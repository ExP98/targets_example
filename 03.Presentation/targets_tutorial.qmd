---
title: "Пакет targets"
author: "Егор Глушков<br>DTwin"
date: "09-09-2024"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

## Проблема №1

-   Новый проект с огромной кодовой базой: десятки файлов, тысячи строк кода

-   Поменять один параметр, "достать" часть данных

-   Как *это* запускать? Как понять зависимости между файлами/функциями?

## Проблема №2

-   Разобрались со связями: есть несколько моделей, которые зависят от разных наборов данных

-   Поменялся один из наборов данных или изменились параметры модели – пересобирать весь проект ***заново***?

::: incremental
-   Спустя часы выполнения возникла ошибка в маленьком малозначимом кусочке кода?

    ![Ошибка? Спустя несколько часов выполнения?](Sources/pepe.jpg){fig-align="center" width="300"}
:::

## Проблема №3

-   Нашли, какую модель надо перезапустить, а какую не надо

-   Как сохранить результаты моделей так, чтобы они не менялись, когда не меняется вход?

-   Как посмотреть вход или выход тех или иных функций?

## Решение проблем

### **T A R G E T S**

![Targets – и ваша жизнь не будет прежней](Sources/logo.png){fig-align="left"}

## Материалы

-   [The {targets} R package user manual](https://books.ropensci.org/targets/) – материалы отсюда

-   [Targets package on Github](https://github.com/ropensci/targets)

-   Get started with {targets} in 4 minutes {{< video https://vimeo.com/700982360 width="600" height="400" >}}

## Особенности

-   Принцип схож с `makefile`

-   В основе лежит функционально-ориентированный стиль (как и во всем R)

-   Весь код представлен как последовательность узлов (*aka таргетов*), сходных с функциями, у которых есть вход и выход. Таргеты зависят друг от друга

-   Ключевой файл – `_targets.R`. В нем содержится список всех таргетов. Всегда должен находиться в корне папки

## Типичная структура проекта

├── \_targets.R

├── 01.Data/data.csv

├── 02.R/

│   ├── 01.functions.R

│   ├── 02.…

├── 03.Targets/

│   ├── 01.tar1.R

│   ├── 02.…

## С чего начинать? \[1/2\]

1.  Написать код как некоторую последовательность функций в R (pipeline), сохранить в папку с кодом `/02.R/`

2.  Вызвать `use_targets()` для создания ключевого файла `_targets.R`

3.  Заполнить `_targets.R` нужными таргетами, не забыв загрузить библиотеки, глобальные переменные и функции

## С чего начинать? \[2/2\]

4.  При первом запуске для создания метаданных использовать tar_make(). В дальнейшем для просмотра графа связей `tar_visnetwork()`[^1]
5.  Результат выполнения в папке `/_targets/`. Просмотр посчитанных таргетов: `tar_read(01.My_first_target)`

[^1]: Или лучше `tar_visnetwork(targets_only = TRUE)`

## Файл \_targets.R \[1/2\]

Классический `_targets.R` содержит:

-   загружаемые пакеты

-   `tar_option_set()`

-   `source("01.R/functions.R")`

-   список таргетов: `list(tar_target(…), tar_target(…), …)`

## Файл \_targets.R \[2/2\]

```{r echo = TRUE, eval = FALSE}
source("01.Targets/01.Libraries.R")
source("01.Targets/02.Functions.R")
source("01.Targets/03.List_of_targets.R")


tar_option_set(format = "qs")
tar_config_set(script = "_targets.R", store = "_targets")


list(
  data_targets,
  ANOVA_targets,
  PCA_targets
)
```

## Файл 03.List_of_targets.R \[1/2\]

```{r echo = TRUE, eval = FALSE}
PCA_targets <- list(
  tar_target(DT.03.1.PCA_model,
             calculate_PCA_model(DT.01.1.Get_data, scale = TRUE)),

  tar_target(DT.03.2.PCA_summary,
             pca_summary(DT.03.1.PCA_model)),

  tar_target(DT.03.3.PCA_loadings,
             pca_loadings(DT.03.1.PCA_model)),

  tar_target(DT.03.4.PCA_plot,
             plot_to_pdf(DT.03.1.PCA_model, "PCA_components")),

  tar_target(DT.03.5.PCA_less_dim,
             pca_plot_lesser_dim(DT.01.1.Get_data, "Species"))
)
```

## Файл 03.List_of_targets.R \[2/2\]

```{r echo = TRUE, eval = FALSE}
data_targets <- list(
  tar_target(DT.01.1.Get_data,
             get_data(data = iris, slice_n = NULL)),

  tar_target(DT.01.2.Plot_pairs,
             plot_pairs(DT.01.1.Get_data))
)


ANOVA_targets <- list(
  tar_target(DT.02.1.ANOVA_model,
             calculate_anova_model(DT.01.1.Get_data))
)
```

## Файл 02.Functions.R \[1/2\]

```{r echo = TRUE, eval = FALSE}
# 1. Getting data           ####
get_data <- function(data = iris, slice_n = NULL) {
  if (!is.null(slice_n)) {
    return(data[slice_n,])
  } else {
    return(data)
  }
}


# 2. Models                 ####
# 2.1 ANOVA model           ####
calculate_anova_model <- function(data_ = iris) {
  r <- aov(lm(data_[, 1] ~ ., data = data_[-1]))
  return(summary(r))
}


# 2.2 PCA model             ####
calculate_PCA_model <- function(data_, scale = TRUE) {
  pca_data <- data_ %>%
    as.data.table() %>%
    copy()
  pca_data <- if (scale) {
    pca_data[, scale(.SD), .SDcols = is.numeric]
  } else {
    pca_data[, .SD, .SDcols = is.numeric]
  }
  return(pca_data %>% princomp())
}
```

## Файл 02.Functions.R \[1/2\]

```{r echo = TRUE, eval = FALSE}
pca_summary <- \(pca_res) pca_res %>% summary()
pca_loadings <- \(pca_res) pca_res %>% loadings()

plot_to_pdf <- function(pca_res, file_name = "my_plot") {
  pdf(paste0("02.Outputs/", file_name, ".pdf"))
  pca_res %>% plot()
  dev.off()
  return(invisible(NULL))
}


# 2.3 Another PCA model      ####
pca_plot_lesser_dim <- function(data_, factor_var, file_name = "PCA_less_dim") {
  pca_res <- data_ %>%
    as.data.table() %>%
    copy() %>%
    .[, scale(.SD), .SDcols = is.numeric] %>%
    ade4::dudi.pca(scannf=FALSE)

  pdf(paste0("02.Outputs/", file_name, ".pdf"))
  ade4::s.class(pca_res$li, data_[, factor_var])
  dev.off()

  return(invisible(NULL))
}


# 2.4 Another plot functions        ####
plot_pairs <- \(data_, file_name = "pairs_plot") {
  pdf(paste0("02.Outputs/", file_name, ".pdf"))
  data_ %>% pairs()
  dev.off()
  return(invisible(NULL))
}
```

## Команды: `tar_manifest`

-   `tar_manifest()`

    ```{r echo = TRUE, eval = FALSE}
    tar_manifest(fields = all_of("command"))
    ```

    ```         
    # A tibble: 8 × 2
      name                 command                                              
      <chr>                <chr>                                                
    1 DT.01.1.Get_data     "get_data(data = iris, slice_n = NULL)"              
    2 DT.03.5.PCA_less_dim "pca_plot_lesser_dim(DT.01.1.Get_data, \"Species\")" 
    3 DT.03.1.PCA_model    "calculate_PCA_model(DT.01.1.Get_data, scale = TRUE)"
    4 DT.01.2.Plot_pairs   "plot_pairs(DT.01.1.Get_data)"                       
    5 DT.02.1.ANOVA_model  "calculate_anova_model(DT.01.1.Get_data)"            
    6 DT.03.2.PCA_summary  "pca_summary(DT.03.1.PCA_model)"                     
    7 DT.03.3.PCA_loadings "pca_loadings(DT.03.1.PCA_model)"                    
    8 DT.03.4.PCA_plot     "plot_to_pdf(DT.03.1.PCA_model, \"PCA_components\")" 
    ```

## Команды: `tar_visnetwork`

-   `tar_visnetwork(targets_only = TRUE)`

    ![](Sources/up_target.png)

## Команды: `tar_visnetwork`

-   `tar_visnetwork(targets_only = TRUE)` после изменения параметров одного из узлов

    ![](Sources/outdated_target.png){width="500"}

## Команды: `tar_make`, `tar_read`

-   `tar_make()`

    ```         
    ✔ skipped target DT.01.1.Get_data
    ✔ skipped target DT.03.5.PCA_less_dim 
    ✔ skipped target DT.03.1.PCA_model 
    ✔ skipped target DT.01.2.Plot_pairs 
    ✔ skipped target DT.02.1.ANOVA_model
    ✔ skipped target DT.03.2.PCA_summary
    ✔ skipped target DT.03.3.PCA_loadings
    ✔ skipped target DT.03.4.PCA_plot
    ✔ skipped pipeline [0.188 seconds]
    ```

-   `tar_read(DT.01.1.Get_data)`

    ```         
        Sepal.Length Sepal.Width Petal.Length Petal.Width    Species 
        1            5.1         3.5          1.4         0.2     setosa
        2            4.9         3.0          1.4         0.2     setosa
        3            4.7         3.2          1.3         0.2     setosa
        4            4.6         3.1          1.5         0.2     setosa
    ```

## Полезные команды: `tar_cue`

-   `tar_cue()`

    ```{r echo = TRUE, eval = FALSE}
    tar_target(DT.01.Download_target, download_data(), cue = tar_cue(mode = "always"))
    ```

    ```{r echo = TRUE, eval = FALSE}
    tar_cue(
      mode = c("thorough", "always", "never"),
      command = TRUE,
      depend = TRUE,
      format = TRUE,
      repository = TRUE,
      iteration = TRUE,
      file = TRUE,
      seed = TRUE
    )
    ```

-   Cue mode. If `"thorough"`, all the cues apply unless individually suppressed. If `"always"`, then the target always runs. If `"never"`, then the target does not run unless the metadata does not exist or the last run errored.

## Отслеживание изменений \[1/2\]

-   Для отслеживания изменений `targets` считает *hash*: так, изменение тела функции, аргументов, зависимостей влечет и изменение хэша

-   Объект должен быть совместим с форматом хранения, выбранным с помощью аргумента `format` функций `tar_target()` или `tar_option_set()`

## Отслеживание изменений \[2/2\]

-   Не все изменения отслеживаются -\> [Non-Exportable Objects](https://cran.r-project.org/web/packages/future/vignettes/future-4-non-exportable-objects.html):

    -   base::connection, DBIconnection

    -   cpp, Rcpp, rJava, reticulate, keras, polars, xgboost

    -   parallel, arrow tables, sparklyr

    -   XML

-   Для таких объектов или существуют обходные пути, или стоит просто принять: изменение этих объектов не всегда влечет автоматическое обнаружение этих изменений пакетом `targets`

## Каким должен быть tar_target? \[1/2\]

Хороший target обычно:

1.  Достаточно крупный, чтобы при пропуске (*skipped*) значительно сократить время выполнения

2.  Достаточно мал, чтобы некоторые таргеты можно было пропустить, даже если другие необходимо перевыполнить

## Каким должен быть tar_target? \[2/2\]

3.  Не вызывает побочных эффектов, таких как изменения глобальной среды (не касается, например, target с `tar_target(format = "file")`)
4.  Возвращает единственное значение, которое:
    i.  Легко понять и проанализировать

    ii. Значимое для проекта

    iii. Легко сохранить как файл, например, с помощью `qsave()`. Следует избегать неэкспортируемых объектов (см. предыдущий слайд)

## Динамическое и статическое ветвление

| Dynamic                                 | Static                                              |
|--------------------------------|----------------------------------------|
| Pipeline creates new targets at runtime | All targets defined in advance                      |
| Cryptic target names                    | Friendly target names                               |
| Scales to hundreds of branches          | Does not scale as easily for `tar_visnetwork()` etc |
| No metaprogramming required             | Familiarity with metaprogramming is helpful         |

## Пакет tarchetypes \[1/3\]

-   [Ссылка](https://docs.ropensci.org/tarchetypes/) на пакет

-   Позволяет создавать таргеты сложной структуры и с особой функциональностью:

    -   Dynamic branching:

        -   over subsets of data frames: `tar_group_by()`, `tar_group_select()`, etc...

        -   over files: `tar_files()`

        -   dynamic batched replication: `tar_rep()`

        -   dynamic batched replication within static branches for data frames: `tar_map_rep()`

## Пакет tarchetypes \[2/3\]

-   

    -   Static branching:

        -   `tar_combine()`

        -   `tar_map()`

    -   Позволяет создавать таргеты сложной структуры и с особой функциональностью:

        -   создание *rmd/quatro*-отчетов: `tar_render(report, "report.Rmd")`

        -   Amazon Web Services (AWS):

            -   `tar_aws_file()`, `tar_aws_parquet()`, etc...

## Пакет tarchetypes \[3/3\]

-   

    -   `tar_url()`, `tar_file()`, `tar_file_fast()`

    -   Особые модели и форматы: `tar_keras()`, `tar_torch()`, `tar_format_feather()`

    -   Сохранение в объектные файлы напрямую: `tar_parquet()`, `tar_fst()`, `tar_fst_dt()`, `tar_fst_tbl()`, `tar_rds()`, `tar_qs()`

## Очистка локального хранилища вычисленных таргетов

-   `tar_destroy()` удаляет `_targets/`

-   `tar_prune()` удаляет данные и метадату, не относящуюся к текущему пайплайну в `_targets.R`

-   `tar_delete()` удаляет конкретный файл из `_targets/objects/` без изменения метадаты

-   `tar_invalidate()` удаляет метадату из таргетса, но оставляет связанные с таргетом данные в `_targets/objects/`

-   `tar_meta_delete()` удаляет `_targets/meta/`

## Некоторые заметки

-   Один targets может быть использован некоторыми проектами (как targets по городам)

-   Для повторяемости исследования при наличии случайности следует фиксировать *seed*: `tar_option_set(seed = 42)`

-   Есть возможность писать список `tar_target()` как ячейки в `rmd` 😱 -\> [Literate programming](https://books.ropensci.org/targets/literate-programming.html)

-   `Targets` можно вычислять распределенно на нескольких вычислителях -\> [Distributed computing](https://books.ropensci.org/targets/crew.html)

## Ускорение работы `targets`

-   Для ускорения работы:

    -   `tar_option_set(format = "qs")`

    -   `tar_option_set(memory = "transient", garbage_collection = TRUE)`

## Предостережение

Не стоит запускать `tar_make()` в крупных проектах (например, проекты 123, 207, 211), где уже записан `targets`. Это может стоить очень долго и дорого

## Домашнее задание

-   Сделать `targets` из задания про `kmeans`. Минимум четыре осмысленных таргета

-   Результат:

    -   оформленный код с `targets`

    -   сохраненный граф всех узлов (*html*)

    -   указание *(можно комментарием в коде)*, где лежит результат применения модели и как эти данные можно прочитать
